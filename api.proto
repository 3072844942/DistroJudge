syntax = "proto3";
option go_package = "./api";

package api;

enum Language {
  C = 0;
  JAVA = 1;
  PYTHON = 2;
  GOLANG = 3;
}

enum Status {
  // 状态，即选举状态。当节点处于该状态时，它会认为当前集群中没有 Leader，因此自己进入选举状态。
  Looking = 0;
  // 状态，即领导者状态，表示已经选出主，且当前节点为 Leader。
  Leading = 1;
  // 状态，即跟随者状态，集群中已经选出主后，其他非主节点状态更新为 Following，表示对 Leader 的追随。
  Following = 2;
  // 状态，即观察者状态，表示当前节点为 Observer，持观望态度，没有投票权和选举权。
  Observing = 3;
}

message Task {
  string  Id = 1;

  string  In = 2;
  string  Code = 3;
  Language  type = 4;

  uint64   CpuTime = 5;
  uint64   Memory = 6;

  string SourceIp = 7;
  string SourcePort = 8;
}

message Result {
  string Id = 1;

  string Out = 2;
  uint64 CpuTime = 3;
  uint64 Memory = 4;
}

message ACK {
  string Id = 1;
}

message Ping {
  int64 time = 1;
}

message Pong {
  uint64 Cpu = 1;                // cpu使用情况
  uint64 MemoryAlloc = 2;        // 程序当前使用内存量
  uint64 TotalAlloc = 3;         // 程序总分配内存量
  uint64 Sys = 4;                // 系统内存
  uint32 NumGC = 5;              // GC次数

  string WorkDir = 10;
  uint64 ActiveCount = 11;        // 当前活跃任务数
  uint64 CompletedTaskCount = 12; // 当前已完成任务数
  uint64 WaitCount = 13;          // 当前等待任务数
  uint64 MaxPoolSize = 14;        // 最大工作线程

  Status status = 6;           // 节点状态

  int64 Time = 20;              // 当前系统时间
}

message Node {
  string id = 1;
  string ip = 2;
  string port = 3;
  uint64 weight = 4;

  Status status = 5;           // 节点状态
}

message Distro {
  uint64 MaxPoolSize = 1;        // 最大工作线程
}

message Cluster {
  string MasterAddr = 1;
  repeated string Addr = 2;
  repeated string clientAddr = 3;
}

service DistroServer {
  // 心跳检测， 更新状态配置
  rpc Heart(Ping) returns (Pong);
  // 加入集群
  rpc Join(Node) returns (Cluster);
  // 发起选举
  rpc Election (Ping) returns (Cluster);
  // 获取集群信息
  rpc Candidate (Ping) returns (Cluster);
  // 宣誓主权
  rpc Victory (Node) returns (Node);
  rpc Checkout (Cluster) returns (ACK);

  // 更改判题配置
  rpc Modify(Distro) returns (Pong);
  // 提交任务
  rpc Execute(Task) returns (ACK);
  // 异步回执
  rpc Caller(Result) returns (ACK);
}