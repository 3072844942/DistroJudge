// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.11
// source: api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	DistroServer_Heart_FullMethodName     = "/api.DistroServer/Heart"
	DistroServer_Join_FullMethodName      = "/api.DistroServer/Join"
	DistroServer_Election_FullMethodName  = "/api.DistroServer/Election"
	DistroServer_Candidate_FullMethodName = "/api.DistroServer/Candidate"
	DistroServer_Victory_FullMethodName   = "/api.DistroServer/Victory"
	DistroServer_Checkout_FullMethodName  = "/api.DistroServer/Checkout"
	DistroServer_Modify_FullMethodName    = "/api.DistroServer/Modify"
	DistroServer_Execute_FullMethodName   = "/api.DistroServer/Execute"
	DistroServer_Caller_FullMethodName    = "/api.DistroServer/Caller"
)

// DistroServerClient is the client API for DistroServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistroServerClient interface {
	// 心跳检测， 更新状态配置
	Heart(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
	// 加入集群
	Join(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Cluster, error)
	// 发起选举
	Election(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Cluster, error)
	// 获取集群信息
	Candidate(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Cluster, error)
	// 宣誓主权
	Victory(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error)
	Checkout(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*ACK, error)
	// 更改判题配置
	Modify(ctx context.Context, in *Distro, opts ...grpc.CallOption) (*Pong, error)
	// 提交任务
	Execute(ctx context.Context, in *Task, opts ...grpc.CallOption) (*ACK, error)
	// 异步回执
	Caller(ctx context.Context, in *Result, opts ...grpc.CallOption) (*ACK, error)
}

type distroServerClient struct {
	cc grpc.ClientConnInterface
}

func NewDistroServerClient(cc grpc.ClientConnInterface) DistroServerClient {
	return &distroServerClient{cc}
}

func (c *distroServerClient) Heart(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, DistroServer_Heart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distroServerClient) Join(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, DistroServer_Join_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distroServerClient) Election(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, DistroServer_Election_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distroServerClient) Candidate(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Cluster, error) {
	out := new(Cluster)
	err := c.cc.Invoke(ctx, DistroServer_Candidate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distroServerClient) Victory(ctx context.Context, in *Node, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, DistroServer_Victory_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distroServerClient) Checkout(ctx context.Context, in *Cluster, opts ...grpc.CallOption) (*ACK, error) {
	out := new(ACK)
	err := c.cc.Invoke(ctx, DistroServer_Checkout_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distroServerClient) Modify(ctx context.Context, in *Distro, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := c.cc.Invoke(ctx, DistroServer_Modify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distroServerClient) Execute(ctx context.Context, in *Task, opts ...grpc.CallOption) (*ACK, error) {
	out := new(ACK)
	err := c.cc.Invoke(ctx, DistroServer_Execute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distroServerClient) Caller(ctx context.Context, in *Result, opts ...grpc.CallOption) (*ACK, error) {
	out := new(ACK)
	err := c.cc.Invoke(ctx, DistroServer_Caller_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistroServerServer is the server API for DistroServer service.
// All implementations must embed UnimplementedDistroServerServer
// for forward compatibility
type DistroServerServer interface {
	// 心跳检测， 更新状态配置
	Heart(context.Context, *Ping) (*Pong, error)
	// 加入集群
	Join(context.Context, *Node) (*Cluster, error)
	// 发起选举
	Election(context.Context, *Ping) (*Cluster, error)
	// 获取集群信息
	Candidate(context.Context, *Ping) (*Cluster, error)
	// 宣誓主权
	Victory(context.Context, *Node) (*Node, error)
	Checkout(context.Context, *Cluster) (*ACK, error)
	// 更改判题配置
	Modify(context.Context, *Distro) (*Pong, error)
	// 提交任务
	Execute(context.Context, *Task) (*ACK, error)
	// 异步回执
	Caller(context.Context, *Result) (*ACK, error)
	mustEmbedUnimplementedDistroServerServer()
}

// UnimplementedDistroServerServer must be embedded to have forward compatible implementations.
type UnimplementedDistroServerServer struct {
}

func (UnimplementedDistroServerServer) Heart(context.Context, *Ping) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heart not implemented")
}
func (UnimplementedDistroServerServer) Join(context.Context, *Node) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedDistroServerServer) Election(context.Context, *Ping) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Election not implemented")
}
func (UnimplementedDistroServerServer) Candidate(context.Context, *Ping) (*Cluster, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Candidate not implemented")
}
func (UnimplementedDistroServerServer) Victory(context.Context, *Node) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Victory not implemented")
}
func (UnimplementedDistroServerServer) Checkout(context.Context, *Cluster) (*ACK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Checkout not implemented")
}
func (UnimplementedDistroServerServer) Modify(context.Context, *Distro) (*Pong, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Modify not implemented")
}
func (UnimplementedDistroServerServer) Execute(context.Context, *Task) (*ACK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Execute not implemented")
}
func (UnimplementedDistroServerServer) Caller(context.Context, *Result) (*ACK, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Caller not implemented")
}
func (UnimplementedDistroServerServer) mustEmbedUnimplementedDistroServerServer() {}

// UnsafeDistroServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistroServerServer will
// result in compilation errors.
type UnsafeDistroServerServer interface {
	mustEmbedUnimplementedDistroServerServer()
}

func RegisterDistroServerServer(s grpc.ServiceRegistrar, srv DistroServerServer) {
	s.RegisterService(&DistroServer_ServiceDesc, srv)
}

func _DistroServer_Heart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistroServerServer).Heart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistroServer_Heart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistroServerServer).Heart(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistroServer_Join_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistroServerServer).Join(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistroServer_Join_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistroServerServer).Join(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistroServer_Election_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistroServerServer).Election(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistroServer_Election_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistroServerServer).Election(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistroServer_Candidate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistroServerServer).Candidate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistroServer_Candidate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistroServerServer).Candidate(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistroServer_Victory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Node)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistroServerServer).Victory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistroServer_Victory_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistroServerServer).Victory(ctx, req.(*Node))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistroServer_Checkout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Cluster)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistroServerServer).Checkout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistroServer_Checkout_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistroServerServer).Checkout(ctx, req.(*Cluster))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistroServer_Modify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Distro)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistroServerServer).Modify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistroServer_Modify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistroServerServer).Modify(ctx, req.(*Distro))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistroServer_Execute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Task)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistroServerServer).Execute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistroServer_Execute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistroServerServer).Execute(ctx, req.(*Task))
	}
	return interceptor(ctx, in, info, handler)
}

func _DistroServer_Caller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Result)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistroServerServer).Caller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: DistroServer_Caller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistroServerServer).Caller(ctx, req.(*Result))
	}
	return interceptor(ctx, in, info, handler)
}

// DistroServer_ServiceDesc is the grpc.ServiceDesc for DistroServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistroServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.DistroServer",
	HandlerType: (*DistroServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heart",
			Handler:    _DistroServer_Heart_Handler,
		},
		{
			MethodName: "Join",
			Handler:    _DistroServer_Join_Handler,
		},
		{
			MethodName: "Election",
			Handler:    _DistroServer_Election_Handler,
		},
		{
			MethodName: "Candidate",
			Handler:    _DistroServer_Candidate_Handler,
		},
		{
			MethodName: "Victory",
			Handler:    _DistroServer_Victory_Handler,
		},
		{
			MethodName: "Checkout",
			Handler:    _DistroServer_Checkout_Handler,
		},
		{
			MethodName: "Modify",
			Handler:    _DistroServer_Modify_Handler,
		},
		{
			MethodName: "Execute",
			Handler:    _DistroServer_Execute_Handler,
		},
		{
			MethodName: "Caller",
			Handler:    _DistroServer_Caller_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}
